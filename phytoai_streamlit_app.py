import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import cv2
import numpy as np
from PIL import Image

# Configura√ß√£o da interface
st.set_page_config(page_title="PhytoAI - Fluxo Completo", layout="wide")
st.title("PhytoAI üåø")
st.subheader("Assistente Inteligente para Planejamento Cromatogr√°fico")

# Inicializar controle de etapas
if "etapa" not in st.session_state:
    st.session_state.etapa = 0

def avancar():
    st.session_state.etapa += 1

def voltar():
    if st.session_state.etapa > 0:
        st.session_state.etapa -= 1

def detectar_pontos_e_calcular_rf(uploaded_file):
    image = Image.open(uploaded_file).convert("RGB")
    image_np = np.array(image)
    gray = cv2.cvtColor(image_np, cv2.COLOR_RGB2GRAY)
    thresh = cv2.adaptiveThreshold(gray, 255,
                                   cv2.ADAPTIVE_THRESH_MEAN_C,
                                   cv2.THRESH_BINARY_INV, 15, 10)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    altura_placa = image_np.shape[0]
    pontos_detectados = []
    imagem_com_pontos = image_np.copy()
    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)
        if h > 5 and w > 5:
            cv2.rectangle(imagem_com_pontos, (x, y), (x + w, y + h), (255, 0, 0), 2)
            rf = round(y / altura_placa, 2)
            pontos_detectados.append({"x": x, "y": y, "Rf": rf})
    pontos_ordenados = sorted(pontos_detectados, key=lambda k: k["y"])
    return pontos_ordenados, imagem_com_pontos

# A partir daqui deve-se incluir o fluxo completo das etapas interativas
st.markdown("üöß Etapas interativas ainda ser√£o reintegradas abaixo...")


# Etapa 0 - Introdu√ß√£o
if st.session_state.etapa == 0:
    st.markdown("üëã **Vamos compreender um pouco melhor sobre sua amostra.**")
    st.button("Prosseguir", on_click=avancar)

# Etapa 1 - Origem da amostra
elif st.session_state.etapa == 1:
    st.session_state.origem = st.selectbox("Origem da amostra", ["Planta", "Fungo", "Bact√©ria", "Alga", "Outro"])
    col1, col2 = st.columns(2)
    col1.button("Anterior", on_click=voltar)
    col2.button("Pr√≥ximo", on_click=avancar)

# Etapa 2 - Parte da planta ou tipo de material
elif st.session_state.etapa == 2:
    if st.session_state.origem == "Planta":
        st.session_state.parte = st.selectbox("Parte da planta utilizada", ["Folhas", "Frutos", "Sementes", "Cascas", "Ra√≠zes", "Outras"])
    elif st.session_state.origem in ["Fungo", "Bact√©ria"]:
        st.session_state.parte = st.selectbox("Material utilizado", ["Mic√©lio", "Meio de cultura", "Outros"])
    elif st.session_state.origem == "Alga":
        st.session_state.parte = st.selectbox("Material utilizado", ["Biomassa total", "Outros"])
    else:
        st.session_state.parte = st.text_input("Descreva a parte/material utilizado")
    col1, col2 = st.columns(2)
    col1.button("Anterior", on_click=voltar)
    col2.button("Pr√≥ximo", on_click=avancar)

# Etapa 3 - T√©cnica de extra√ß√£o
elif st.session_state.etapa == 3:
    st.session_state.tecnica = st.selectbox("T√©cnica de extra√ß√£o", [
        "Macera√ß√£o", "Infus√£o", "Decoc√ß√£o", "Digest√£o", "Soxhlet", "Percola√ß√£o",
        "Extra√ß√£o L√≠quido-L√≠quido", "Destila√ß√£o", "Hidrodestila√ß√£o",
        "Extra√ß√£o com Fluidos Supercr√≠ticos (SFE)", "Extra√ß√£o Assistida por Micro-ondas (MAE)",
        "Extra√ß√£o Assistida por Ultrassom (UAE)"
    ])
    col1, col2 = st.columns(2)
    col1.button("Anterior", on_click=voltar)
    col2.button("Pr√≥ximo", on_click=avancar)

# Etapa 4 - Solvente utilizado
elif st.session_state.etapa == 4:
    st.session_state.solvente = st.selectbox("Solvente(s) utilizado(s)", [
        "√Ågua", "Etanol", "Metanol", "Acetona", "Hexano", "Clorof√≥rmio", "√âter et√≠lico",
        "Acetato de etila", "Diclorometano", "Tolueno", "Di√≥xido de carbono supercr√≠tico (scCO2)",
        "√Ågua-Etanol", "√Ågua-Metanol", "Hexano-Acetato de Etila",
        "Clorof√≥rmio-Metanol", "√âter de Petr√≥leo-√âter Et√≠lico"
    ])
    col1, col2 = st.columns(2)
    col1.button("Anterior", on_click=voltar)
    col2.button("Pr√≥ximo", on_click=avancar)



# Etapa 5 - G√™nero e esp√©cie (entrada opcional)
elif st.session_state.etapa == 5:
    st.session_state.genero = st.text_input("G√™nero (opcional)", key="genero_input")
    st.session_state.especie = st.text_input("Esp√©cie (opcional)", key="especie_input")
    col1, col2 = st.columns(2)
    col1.button("Anterior", on_click=voltar)
    col2.button("Finalizar entrada", on_click=avancar)

# Etapa 6 - Composi√ß√£o qu√≠mica autom√°tica ou entrada manual
elif st.session_state.etapa == 6:
    if not st.session_state.genero:
        st.session_state.no_compounds = True
        avancar()
    else:
        termo = f"{st.session_state.genero} {st.session_state.especie}".strip()
        resultados = []  # Exemplo: buscar_pubchem(termo) + buscar_npatlas(termo)
        if not resultados:
            st.warning(f"Nenhum composto encontrado para *{termo}*. Prosseguiremos para entrada manual.")
            st.session_state.no_compounds = True
            avancar()
        else:
            df = pd.DataFrame(resultados)
            st.session_state.df_compostos = df
            st.dataframe(df)
            col1, col2 = st.columns(2)
            col1.button("Anterior", on_click=voltar)
            col2.button("Avan√ßar para simula√ß√£o cromatogr√°fica", on_click=avancar)

# Etapa 7 - Entrada manual (caso n√£o tenha dados)
elif st.session_state.etapa == 7 and st.session_state.get("no_compounds", False):
    st.subheader("üìã Composi√ß√£o Qu√≠mica Manual")
    conhece = st.radio("Voc√™ conhece a composi√ß√£o qu√≠mica da sua amostra?", ["Sim", "N√£o"], horizontal=True)
    if conhece == "Sim":
        st.session_state.conhece_comp = True
        avancar()
    else:
        st.session_state.conhece_comp = False
        avancar()

# Etapa 8 - Sele√ß√£o de classes qu√≠micas ou an√°lise CCD
elif st.session_state.etapa == 8 and st.session_state.conhece_comp:
    st.subheader("üß¨ Quais classes de metab√≥litos voc√™ espera encontrar?")
    classes = st.multiselect("Selecione todas que se aplicam:", [
        "Monoterpenos", "Sesquiterpenos", "Diterpenos", "Triterpenos", "Tetraterpenos", "Politerpenos",
        "√Åcidos fen√≥licos", "Flavonoides", "Lignanas", "Taninos", "Cumarinas", "Estilbenos", "Quinonas",
        "Pirrolidinas", "Piridinas", "Tropanos", "Ind√≥is", "Quinole√≠nas", "Isoquinole√≠nas", "Purinas",
        "Aminas biog√™nicas", "Macrol√≠deos", "Tetraciclinas", "Antraquinonas", "NRPs", "Pept√≠deos", 
        "Glicos√≠deos card√≠acos", "Glicos√≠deos cianog√™nicos", "Saponinas", "Amino√°cidos n√£o proteicos", 
        "Toxinas", "Pigmentos"
    ])
    st.session_state.classes_quimicas = classes
    if classes:
        col1, col2 = st.columns(2)
        col1.button("Anterior", on_click=voltar)
        col2.button("Avan√ßar para escolha cromatogr√°fica", on_click=avancar)

elif st.session_state.etapa == 8 and not st.session_state.conhece_comp:
    st.subheader("üì∑ An√°lise da Amostra via CCD")
    st.session_state.ccd_img = st.file_uploader("Upload da imagem da placa CCD", type=["jpg", "jpeg", "png"])
    st.markdown("### üìÑ Fase estacion√°ria:")
    st.session_state.fase_estacionaria = st.selectbox("Fase Estacion√°ria", ["S√≠lica", "Alumina", "C-18"])

    st.markdown("### üíß Fase m√≥vel:")
    solventes = ["N√£o", "√Ågua", "Etanol", "Metanol", "Hexano", "Acetato de etila", "Clorof√≥rmio", "Diclorometano", "Acetona", "Tolueno"]
    st.session_state.solvente_A = st.selectbox("Solvente A", solventes)
    st.session_state.percentual_A = st.slider("Porcentagem Solvente A", 0, 100, 0)
    st.session_state.solvente_B = st.selectbox("Solvente B", solventes)
    st.session_state.percentual_B = st.slider("Porcentagem Solvente B", 0, 100, 0)
    st.session_state.solvente_C = st.selectbox("Solvente C", solventes)
    st.session_state.percentual_C = st.slider("Porcentagem Solvente C", 0, 100, 0)

    if st.session_state.ccd_img:
        st.image(st.session_state.ccd_img, caption="Imagem carregada", use_column_width=True)
        pontos, imagem = detectar_pontos_e_calcular_rf(st.session_state.ccd_img)
        st.image(imagem, caption="Manchas detectadas", use_column_width=True)
        st.session_state.rf_pontos = pd.DataFrame(pontos)
        st.dataframe(st.session_state.rf_pontos)

    col1, col2 = st.columns(2)
    col1.button("Anterior", on_click=voltar)
    col2.button("Avan√ßar para escolha cromatogr√°fica", on_click=avancar)
